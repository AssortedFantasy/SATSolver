(* This version is for single letter variables or subscript indexed variables*)

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R"
              | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
              | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q"
              | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";

numeric = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";

(* Note: Double negated variables are NOT valid expressions, if you truly must do it, use parenthesis,
aka A'' is not valid but (A')' is, also directly negated literals are not allowed
similarly you must use parenthesis to negate them *)

literals = "0" | "1";

identifier =  letter | letter, ["_"], numeric, {numeric};

positive_variable = identifier;
negated_variable = identifier, "'" | "~", identifier;

variable = negated_variable | positive_variable;

(* Order of operations is Parenthesis > Negation > AND > OR = XOR > EQUIV evaluated left to right *)

expression = parenthesis_expression | and_expression | or_expression | negated_expression | variable | literal;
parenthesis_expression = "(", expression, ")" | "[", expression "]";

and_operator = "*" | "&" | "&&";

(* NOTE: Literals are NOT tightly bound, this is so you can write A1 instead of A_1 *)

tightly_bound_expression = and_expression | negated_expression | variable | parenthesis_expression;
and_expression = tightly_bound_expression, tightly_bound_expression
                | expression, and_operator, expression;

or_operator = "+" | "|" | "||";
or_expression = expression, or_operator, expression;

negated_expression = parenthesis_expression, "'" | "~", parenthesis_expression;

dualed_expression = parenthesis_expression, "^d"

xor_expression = expression, xor_operator, expression;
